// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Nieko.Infrastructure.ComponentModel.ViewModelling
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System;
    
    
    #line 1 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class ModelViewTemplate : ModelViewTemplateBase
    {
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write("\r\n\t[Serializable]\r\n\tpublic partial class ");
            
            #line 13 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 13 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BaseType == typeof(object) ? "" : " : " + BaseType.FullName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t");
            
            #line 15 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

		
for(int i = 0; i<PropertyTypes.Length; i++)
{
			
				
            
            #line default
            #line hidden
            this.Write("\tpublic ");
            
            #line 21 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PropertyTypes[i]));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 21 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PropertyNames[i]));
            
            #line default
            #line hidden
            
            #line 21 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

	if(!HasNotifyingFields)
	{
		
            
            #line default
            #line hidden
            this.Write("{ get; set; }\r\n\t\r\n\t\t");
            
            #line 26 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

	}
	else
	{
		
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn Get(() => ");
            
            #line 35 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PropertyNames[i]));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t}\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\tSet(() => ");
            
            #line 39 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PropertyNames[i]));
            
            #line default
            #line hidden
            this.Write(", value);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t");
            
            #line 43 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

	}
	
}

if(NonNullableProperties.Length > 0 && typeof(Nieko.Infrastructure.ViewModel.EditableViewModel).IsAssignableFrom(BaseType))
{
	
            
            #line default
            #line hidden
            this.Write("\tprotected override void InitializeValidation()\r\n\t{\r\n\t\tbase.InitializeValidation(" +
                    ");\r\n");
            
            #line 54 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

	foreach(var propertyName in NonNullableProperties)
	{
		
            
            #line default
            #line hidden
            this.Write("\t\tAddValidation(");
            
            #line 58 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write(", new Func<string>(() => ");
            
            #line 58 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write(" == null ? \"Required field\" : string.Empty) );\r\n\t\t");
            
            #line 59 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

		
	}
	
            
            #line default
            #line hidden
            this.Write("\t}\r\n\t");
            
            #line 64 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

}

	
            
            #line default
            #line hidden
            this.Write("\t\r\n\t}\r\n\t");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "J:\Microsoft .NET\4.0\Nieko.Infrastructure.Desktop\ComponentModel\ViewModelling\ModelViewTemplate.tt"

private string _ClassNameField;

/// <summary>
/// Access the ClassName parameter of the template.
/// </summary>
private string ClassName
{
    get
    {
        return this._ClassNameField;
    }
}

private global::System.Type _BaseTypeField;

/// <summary>
/// Access the BaseType parameter of the template.
/// </summary>
private global::System.Type BaseType
{
    get
    {
        return this._BaseTypeField;
    }
}

private bool _HasNotifyingFieldsField;

/// <summary>
/// Access the HasNotifyingFields parameter of the template.
/// </summary>
private bool HasNotifyingFields
{
    get
    {
        return this._HasNotifyingFieldsField;
    }
}

private string[] _PropertyTypesField;

/// <summary>
/// Access the PropertyTypes parameter of the template.
/// </summary>
private string[] PropertyTypes
{
    get
    {
        return this._PropertyTypesField;
    }
}

private string[] _PropertyNamesField;

/// <summary>
/// Access the PropertyNames parameter of the template.
/// </summary>
private string[] PropertyNames
{
    get
    {
        return this._PropertyNamesField;
    }
}

private string[] _NonNullablePropertiesField;

/// <summary>
/// Access the NonNullableProperties parameter of the template.
/// </summary>
private string[] NonNullableProperties
{
    get
    {
        return this._NonNullablePropertiesField;
    }
}


public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ClassNameValueAcquired = false;
if (this.Session.ContainsKey("ClassName"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["ClassName"].GetType()) == false))
    {
        this.Error("The type \'System.string\' of the parameter \'ClassName\' did not match the type of t" +
                "he data passed to the template.");
    }
    else
    {
        this._ClassNameField = ((string)(this.Session["ClassName"]));
        ClassNameValueAcquired = true;
    }
}
if ((ClassNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ClassName");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.string\' of the parameter \'ClassName\' did not match the type of t" +
                    "he data passed to the template.");
        }
        else
        {
            this._ClassNameField = ((string)(data));
        }
    }
}
bool BaseTypeValueAcquired = false;
if (this.Session.ContainsKey("BaseType"))
{
    if ((typeof(global::System.Type).IsAssignableFrom(this.Session["BaseType"].GetType()) == false))
    {
        this.Error("The type \'System.Type\' of the parameter \'BaseType\' did not match the type of the " +
                "data passed to the template.");
    }
    else
    {
        this._BaseTypeField = ((global::System.Type)(this.Session["BaseType"]));
        BaseTypeValueAcquired = true;
    }
}
if ((BaseTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("BaseType");
    if ((data != null))
    {
        if ((typeof(global::System.Type).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Type\' of the parameter \'BaseType\' did not match the type of the " +
                    "data passed to the template.");
        }
        else
        {
            this._BaseTypeField = ((global::System.Type)(data));
        }
    }
}
bool HasNotifyingFieldsValueAcquired = false;
if (this.Session.ContainsKey("HasNotifyingFields"))
{
    if ((typeof(bool).IsAssignableFrom(this.Session["HasNotifyingFields"].GetType()) == false))
    {
        this.Error("The type \'System.Boolean\' of the parameter \'HasNotifyingFields\' did not match the" +
                " type of the data passed to the template.");
    }
    else
    {
        this._HasNotifyingFieldsField = ((bool)(this.Session["HasNotifyingFields"]));
        HasNotifyingFieldsValueAcquired = true;
    }
}
if ((HasNotifyingFieldsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("HasNotifyingFields");
    if ((data != null))
    {
        if ((typeof(bool).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Boolean\' of the parameter \'HasNotifyingFields\' did not match the" +
                    " type of the data passed to the template.");
        }
        else
        {
            this._HasNotifyingFieldsField = ((bool)(data));
        }
    }
}
bool PropertyTypesValueAcquired = false;
if (this.Session.ContainsKey("PropertyTypes"))
{
    if ((typeof(string[]).IsAssignableFrom(this.Session["PropertyTypes"].GetType()) == false))
    {
        this.Error("The type \'System.string[]\' of the parameter \'PropertyTypes\' did not match the typ" +
                "e of the data passed to the template.");
    }
    else
    {
        this._PropertyTypesField = ((string[])(this.Session["PropertyTypes"]));
        PropertyTypesValueAcquired = true;
    }
}
if ((PropertyTypesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("PropertyTypes");
    if ((data != null))
    {
        if ((typeof(string[]).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.string[]\' of the parameter \'PropertyTypes\' did not match the typ" +
                    "e of the data passed to the template.");
        }
        else
        {
            this._PropertyTypesField = ((string[])(data));
        }
    }
}
bool PropertyNamesValueAcquired = false;
if (this.Session.ContainsKey("PropertyNames"))
{
    if ((typeof(string[]).IsAssignableFrom(this.Session["PropertyNames"].GetType()) == false))
    {
        this.Error("The type \'System.string[]\' of the parameter \'PropertyNames\' did not match the typ" +
                "e of the data passed to the template.");
    }
    else
    {
        this._PropertyNamesField = ((string[])(this.Session["PropertyNames"]));
        PropertyNamesValueAcquired = true;
    }
}
if ((PropertyNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("PropertyNames");
    if ((data != null))
    {
        if ((typeof(string[]).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.string[]\' of the parameter \'PropertyNames\' did not match the typ" +
                    "e of the data passed to the template.");
        }
        else
        {
            this._PropertyNamesField = ((string[])(data));
        }
    }
}
bool NonNullablePropertiesValueAcquired = false;
if (this.Session.ContainsKey("NonNullableProperties"))
{
    if ((typeof(string[]).IsAssignableFrom(this.Session["NonNullableProperties"].GetType()) == false))
    {
        this.Error("The type \'System.string[]\' of the parameter \'NonNullableProperties\' did not match" +
                " the type of the data passed to the template.");
    }
    else
    {
        this._NonNullablePropertiesField = ((string[])(this.Session["NonNullableProperties"]));
        NonNullablePropertiesValueAcquired = true;
    }
}
if ((NonNullablePropertiesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NonNullableProperties");
    if ((data != null))
    {
        if ((typeof(string[]).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.string[]\' of the parameter \'NonNullableProperties\' did not match" +
                    " the type of the data passed to the template.");
        }
        else
        {
            this._NonNullablePropertiesField = ((string[])(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class ModelViewTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
