<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs" #>
<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Linq"#>
<#@ include file="EF.Utility.CS.ttinclude"#>

<#

var ModelPath = Path.GetFileNameWithoutExtension(this.Host.TemplateFile).ToLowerInvariant().Replace(".datacontext", "") + ".edmx";
ModelPath = Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), ModelPath);

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);
List<EntityType> parentTypes = new List<EntityType>();
List<EntityType> subTypes = new List<EntityType>();
EntityType subType = null;

string inputFile = ModelPath;
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using System.Linq.Expressions;
using System;
using System.Data;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Collections;
using System.Reflection;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Objects.DataClasses;
using Nieko.Infrastructure.Data;
using Nieko.Infrastructure.Collections;
using Nieko.Infrastructure.EventAggregation;

<#
if (!String.IsNullOrEmpty(namespaceName))
{
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#
    PushIndent(CodeRegion.GetIndent(1));
}
#>
public partial class <#=code.Escape(container)#>Registration : DataStoreRegistration<<#=code.Escape(container)#>>
{
	protected override void SetConnectionStringName()
	{
		ConnectionStringName = DefaultConnectionStringName;
		Initialize();
	}
	
	partial void Initialize();
}

<#=Accessibility.ForType(container)#> partial class <#=code.Escape(container)#> : ObjectContext, IDataStore
{
		
<#
		PushIndent(CodeRegion.GetIndent(1));
		region.Begin("IDataStore Implementation"); 
		
#>

private Dictionary<Type, Func<object>> _ItemsAccessors;
private Dictionary<Type, Action<object>> _SaveActions;
private Dictionary<KeyValuePair<Type, string>, Delegate> _TypeIndexFunctions = new Dictionary<KeyValuePair<Type, string>, Delegate>();
private ISet<StoredTypeInfo> _StoredTypes;

/// <summary>
/// Entity Set Property Get delegate by Entity Type
/// </summary>
protected Dictionary<Type, Func<object>> ItemsAccessors
{
	get
	{
		if(_ItemsAccessors == null)
		{
			_ItemsAccessors = new Dictionary<Type, Func<object>>();
			<#
			subTypes.Clear();
			foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
	        {
				if(!entitySet.ElementType.Abstract)
				{
			#>
			
			_ItemsAccessors.Add(typeof(<#=code.Escape(entitySet.ElementType.Name)#>), () => <#=code.Escape(entitySet)#>);<#
				}
				subTypes = new List<EntityType>(ItemCollection.GetItems<EntityType>().AsQueryable()
					.Where(et => et.BaseType == entitySet.ElementType));
				while(subTypes.Count > 0)
				{
					subType = subTypes[subTypes.Count - 1];
					if(!subType.Abstract)
					{
						#>
				
			_ItemsAccessors.Add(typeof(<#=code.Escape(subType.Name)#>), delegate (){ return <#=code.Escape(entitySet)#>.OfType<#="<"+code.Escape(subType.Name)+">"#>();});<#
					}
					subTypes.AddRange(ItemCollection.GetItems<EntityType>().AsQueryable()
					.Where(et => et.BaseType == subType));
					subTypes.RemoveAt(subTypes.Count - 1);
				}
			
			}
			#>
			
		}
		
		return _ItemsAccessors;
	}
}

public ISet<StoredTypeInfo> StoredTypes
{
    get
    {
        if (_StoredTypes == null)
        {
            _StoredTypes = new HashSet<StoredTypeInfo>(_ItemsAccessors
                .Select(i => new StoredTypeInfo(i.Key, () => (IQueryable)i.Value())));
        }

        return _StoredTypes;
    }
}

/// <summary>
/// Retrieve single instance satisfying filter. If no instances satisfy, returns null
/// </summary>
public T GetItem<T>(Expression<Func<T, bool>> filter)
{
    var accessor = ItemsAccessors[typeof(T)];
    
	return (accessor() as IQueryable<T>).FirstOrDefault(filter);
}

/// <summary>
/// Returns a Queryable object for all instances of T
/// </summary>
public IQueryable<T> GetItems<T>()
{
	return ItemsAccessors[typeof(T)]() as IQueryable<T>;
}

/// <summary>
/// Save item to database
/// </summary>
public void Save<T>(T item)
{
	CheckSaveActions();
	
	if(!_SaveActions.ContainsKey(typeof(T)))
	{
		throw new InvalidOperationException("Container does not contain " + typeof(T).FullName);
	}
	
	_SaveActions[typeof(T)](item);
	SaveChanges();
}

/// <summary>
/// Save item to database
/// </summary>
public void Save(object item)
{
	CheckSaveActions();
	
	if(!_SaveActions.ContainsKey(item.GetType()))
	{
		throw new InvalidOperationException("Container does not contain " + item.GetType().FullName);
	}
	
	_SaveActions[item.GetType()](item);
	SaveChanges();
	
}

/// <summary>
/// Delete item from database
/// </summary>
public void Delete<T>(T item)
{
	DeleteObject(item);
	SaveChanges();
}

/// <summary>
/// Refresh single item from database
/// </summary>
public void Refresh(object entity)
{
	Refresh(RefreshMode.StoreWins, entity);
}

/// <summary>
/// Refresh a collection of items from database
/// </summary>
public void Refresh(IEnumerable collection)
{
	Refresh(RefreshMode.StoreWins, collection);
}

private void CheckSaveActions()
{
	if(_SaveActions != null)
	{
		return;
	}
	
	_SaveActions = new Dictionary<Type, Action<object>>();
	
	<#
 	foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
		
	#>
	
	_SaveActions.Add(typeof(<#=code.Escape(entitySet.ElementType.Name)#>), o =>
	{
		var item = (o as <#=code.Escape(entitySet.ElementType.Name)#>);
		var id = item.Id;
		
		if(id == 0)
		{
			AddTo<#=code.Escape(entitySet)#>(item);
		}
	});
	
	<#
		subTypes = new List<EntityType>(ItemCollection.GetItems<EntityType>().AsQueryable()
					.Where(et => et.BaseType == entitySet.ElementType));
		
		while(subTypes.Count > 0)
		{
			subType = subTypes[subTypes.Count - 1];
			if(!subType.Abstract)
			{
				
	#>
	
	_SaveActions.Add(typeof(<#=code.Escape(subType.Name)#>), o =>
	{
		var item = o as <#=code.Escape(subType.Name)#>; 
		var id = item.Id;
		
		if(id == 0)
		{
			AddTo<#=code.Escape(entitySet)#>(item);
		}
	});
	
	<#
			}
			subTypes.AddRange(ItemCollection.GetItems<EntityType>().AsQueryable()
			.Where(et => et.BaseType == subType));
			subTypes.RemoveAt(subTypes.Count - 1);
		}
	}
		
	#>
}
<#
		region.End();
		PopIndent();
		PopIndent();
#>
	}
}